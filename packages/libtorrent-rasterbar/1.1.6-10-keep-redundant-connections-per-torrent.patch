diff --git a/ChangeLog b/ChangeLog
index c2bd5c25b..3c69c8bd7 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,4 @@
+	* add keep-redundant-connections at a per-torrent level
 
 1.1.6 release
 
diff --git a/bindings/python/src/torrent_handle.cpp b/bindings/python/src/torrent_handle.cpp
index 80c7eb52e..b8cbcf335 100644
--- a/bindings/python/src/torrent_handle.cpp
+++ b/bindings/python/src/torrent_handle.cpp
@@ -510,6 +510,8 @@ void bind_torrent_handle()
         .def("set_download_limit", _(&torrent_handle::set_download_limit))
         .def("download_limit", _(&torrent_handle::download_limit))
         .def("set_sequential_download", _(&torrent_handle::set_sequential_download))
+        .def("set_keep_redundant_connections", _(&torrent_handle::set_keep_redundant_connections))
+        .def("keep_redundant_connections", _(&torrent_handle::keep_redundant_connections))
 #ifndef TORRENT_NO_DEPRECATE
         .def("set_peer_upload_limit", &set_peer_upload_limit)
         .def("set_peer_download_limit", &set_peer_download_limit)
diff --git a/include/libtorrent/add_torrent_params.hpp b/include/libtorrent/add_torrent_params.hpp
index 99c004857..39e83cb94 100644
--- a/include/libtorrent/add_torrent_params.hpp
+++ b/include/libtorrent/add_torrent_params.hpp
@@ -275,6 +275,17 @@ namespace libtorrent
 			// added.
 			flag_stop_when_ready = 0x4000,
 
+			// specifies whether we should keep open any connections where both ends
+			// have no utility in keeping the connections open. For instance if both
+			// ends have completed their downloads, there's no point in keeping them
+			// open. This can be useful if a partial set of pieces are requested,
+			// and all have been downloaded, but you know that you may request more
+			// soon.
+			//
+			// This acts as a per-torrent override to
+			// ``settings_pack::close_redundant_connections``.
+			flag_keep_redundant_connections = 0x20000,
+
 			// internal
 			default_flags = flag_pinned | flag_update_subscribe | flag_auto_managed | flag_paused | flag_apply_ip_filter
 
diff --git a/include/libtorrent/torrent.hpp b/include/libtorrent/torrent.hpp
index 965eab326..5585b87e9 100644
--- a/include/libtorrent/torrent.hpp
+++ b/include/libtorrent/torrent.hpp
@@ -429,6 +429,10 @@ namespace libtorrent
 		bool is_sequential_download() const
 		{ return m_sequential_download || m_auto_sequential; }
 
+		void set_keep_redundant_connections(bool keep);
+		bool keep_redundant_connections() const;
+		void maybe_close_redundant_connections();
+
 		void queue_up();
 		void queue_down();
 		void set_queue_position(int p);
@@ -1521,6 +1525,9 @@ namespace libtorrent
 		// for improved disk I/O performance.
 		bool m_auto_sequential:1;
 
+		// this backs the torrent_handle::keep_redundant_connections setting.
+		bool m_keep_redundant_connections:1;
+
 		// this means we haven't verified the file content
 		// of the files we're seeding. the m_verified bitfield
 		// indicates which pieces have been verified and which
diff --git a/include/libtorrent/torrent_handle.hpp b/include/libtorrent/torrent_handle.hpp
index e7a204685..211e81930 100644
--- a/include/libtorrent/torrent_handle.hpp
+++ b/include/libtorrent/torrent_handle.hpp
@@ -1186,6 +1186,20 @@ namespace libtorrent
 		void connect_peer(tcp::endpoint const& adr, int source = 0
 			, int flags = 0x1 + 0x4 + 0x8) const;
 
+		// ``set_keep_redundant_connections()`` specifies whether we should keep
+		// open any connections where both ends have no utility in keeping the
+		// connections open. For instance if both ends have completed their
+		// downloads, there's no point in keeping them open. This can be useful if
+		// a partial set of pieces are requested, and all have been downloaded, but
+		// you know that you may request more soon.
+		//
+		// This acts as a per-torrent override to
+		// ``settings_pack::close_redundant_connections``.
+		//
+		// ``keep_redundant_connections()`` returns the current setting.
+		void set_keep_redundant_connections(bool keep) const;
+		bool keep_redundant_connections() const;
+
 		// ``set_max_uploads()`` sets the maximum number of peers that's unchoked
 		// at the same time on this torrent. If you set this to -1, there will be
 		// no limit. This defaults to infinite. The primary setting controlling
diff --git a/src/bt_peer_connection.cpp b/src/bt_peer_connection.cpp
index bd7d79115..5bb71029a 100644
--- a/src/bt_peer_connection.cpp
+++ b/src/bt_peer_connection.cpp
@@ -1906,7 +1906,7 @@ namespace libtorrent
 		// if we're finished and this peer is uploading only
 		// disconnect it
 		if (t->is_finished() && upload_only()
-			&& m_settings.get_bool(settings_pack::close_redundant_connections)
+			&& !t->keep_redundant_connections()
 			&& !t->share_mode())
 			disconnect(errors::upload_upload_connection, op_bittorrent);
 
@@ -2006,7 +2006,7 @@ namespace libtorrent
 		// if we send upload-only, the other end is very likely to disconnect
 		// us, at least if it's a seed. If we don't want to close redundant
 		// connections, don't sent upload-only
-		if (!m_settings.get_bool(settings_pack::close_redundant_connections)) return;
+		if (t->keep_redundant_connections()) return;
 
 #ifndef TORRENT_DISABLE_LOGGING
 		peer_log(peer_log_alert::outgoing_message, "UPLOAD_ONLY", "%d"
diff --git a/src/peer_connection.cpp b/src/peer_connection.cpp
index 0f3495475..59604c3ec 100644
--- a/src/peer_connection.cpp
+++ b/src/peer_connection.cpp
@@ -2160,11 +2160,12 @@ namespace libtorrent
 
 		// we cannot disconnect in a constructor
 		TORRENT_ASSERT(m_in_constructor == false);
-		if (!m_settings.get_bool(settings_pack::close_redundant_connections)) return false;
 
 		boost::shared_ptr<torrent> t = m_torrent.lock();
 		if (!t) return false;
 
+		if (t->keep_redundant_connections()) return false;
+
 		// if we don't have the metadata yet, don't disconnect
 		// also, if the peer doesn't have metadata we shouldn't
 		// disconnect it, since it may want to request the
@@ -6700,8 +6701,7 @@ namespace libtorrent
 			TORRENT_ASSERT(t->torrent_file().num_pieces() == int(m_have_piece.size()));
 
 		// in share mode we don't close redundant connections
-		if (m_settings.get_bool(settings_pack::close_redundant_connections)
-			&& !t->share_mode())
+		if (!t->keep_redundant_connections() && !t->share_mode())
 		{
 			bool const ok_to_disconnect =
 				can_disconnect(errors::upload_upload_connection)
@@ -6732,7 +6732,7 @@ namespace libtorrent
 		}
 
 		if (!m_disconnect_started && m_initialized
-			&& m_settings.get_bool(settings_pack::close_redundant_connections))
+			&& !t->keep_redundant_connections())
 		{
 			// none of this matters if we're disconnecting anyway
 			if (t->is_upload_only() && !m_need_interest_update)
diff --git a/src/torrent.cpp b/src/torrent.cpp
index feacfa4e4..1a570d88a 100644
--- a/src/torrent.cpp
+++ b/src/torrent.cpp
@@ -236,6 +236,7 @@ namespace libtorrent
 		, m_finished_time(0)
 		, m_sequential_download(false)
 		, m_auto_sequential(false)
+		, m_keep_redundant_connections((p.flags & add_torrent_params::flag_keep_redundant_connections) != 0)
 		, m_seed_mode(false)
 		, m_super_seeding(false)
 		, m_override_resume_data((p.flags & add_torrent_params::flag_override_resume_data) != 0)
@@ -6955,6 +6956,9 @@ namespace {
 			int sequential_ = rd.dict_find_int_value("sequential_download", -1);
 			if (sequential_ != -1) set_sequential_download(sequential_ != 0);
 
+			int keep_redundant_ = rd.dict_find_int_value("keep_redundant_connections", -1);
+			if (keep_redundant_ != -1) set_keep_redundant_connections(keep_redundant_ != 0);
+
 			int paused_ = rd.dict_find_int_value("paused", -1);
 			if (paused_ != -1)
 			{
@@ -7235,6 +7239,8 @@ namespace {
 
 		ret["sequential_download"] = m_sequential_download;
 
+		ret["keep_redundant_connections"] = m_keep_redundant_connections;
+
 		ret["seed_mode"] = m_seed_mode;
 		ret["super_seeding"] = m_super_seeding;
 
@@ -8583,30 +8589,7 @@ namespace {
 			m_completed_time = time(0);
 
 		// disconnect all seeds
-		if (settings().get_bool(settings_pack::close_redundant_connections))
-		{
-			// TODO: 1 should disconnect all peers that have the pieces we have
-			// not just seeds. It would be pretty expensive to check all pieces
-			// for all peers though
-			std::vector<peer_connection*> seeds;
-			for (peer_iterator i = m_connections.begin();
-				i != m_connections.end(); ++i)
-			{
-				TORRENT_INCREMENT(m_iterating_connections);
-				peer_connection* p = *i;
-				TORRENT_ASSERT(p->associated_torrent().lock().get() == this);
-				if (p->upload_only())
-				{
-#ifndef TORRENT_DISABLE_LOGGING
-					p->peer_log(peer_log_alert::info, "SEED", "CLOSING CONNECTION");
-#endif
-					seeds.push_back(p);
-				}
-			}
-			std::for_each(seeds.begin(), seeds.end()
-				, boost::bind(&peer_connection::disconnect, _1, errors::torrent_finished
-				, op_bittorrent, 0));
-		}
+		maybe_close_redundant_connections();
 
 		if (m_abort) return;
 
@@ -8627,6 +8610,33 @@ namespace {
 			m_ses.trigger_auto_manage();
 	}
 
+	void torrent::maybe_close_redundant_connections()
+	{
+		if (keep_redundant_connections()) return;
+
+		// TODO: 1 should disconnect all peers that have the pieces we have
+		// not just seeds. It would be pretty expensive to check all pieces
+		// for all peers though
+		std::vector<peer_connection*> seeds;
+		for (peer_iterator i = m_connections.begin();
+			i != m_connections.end(); ++i)
+		{
+			TORRENT_INCREMENT(m_iterating_connections);
+			peer_connection* p = *i;
+			TORRENT_ASSERT(p->associated_torrent().lock().get() == this);
+			if (p->upload_only())
+			{
+#ifndef TORRENT_DISABLE_LOGGING
+				p->peer_log(peer_log_alert::info, "SEED", "CLOSING CONNECTION");
+#endif
+				seeds.push_back(p);
+			}
+		}
+		std::for_each(seeds.begin(), seeds.end()
+			, boost::bind(&peer_connection::disconnect, _1, errors::torrent_finished
+			, op_bittorrent, 0));
+	}
+
 	// this is called when we were finished, but some files were
 	// marked for downloading, and we are no longer finished
 	void torrent::resume_download()
@@ -9310,6 +9320,23 @@ namespace {
 		state_updated();
 	}
 
+	bool torrent::keep_redundant_connections() const
+	{
+		return m_keep_redundant_connections ||
+			!settings().get_bool(settings_pack::close_redundant_connections);
+	}
+
+	void torrent::set_keep_redundant_connections(bool keep)
+	{
+		if (m_keep_redundant_connections == keep) return;
+		m_keep_redundant_connections = keep;
+
+		maybe_close_redundant_connections();
+
+		set_need_save_resume();
+		state_updated();
+	}
+
 	void torrent::queue_up()
 	{
 		// finished torrents may not change their queue positions, as it's set to
diff --git a/src/torrent_handle.cpp b/src/torrent_handle.cpp
index 04d20a9be..e293c7369 100644
--- a/src/torrent_handle.cpp
+++ b/src/torrent_handle.cpp
@@ -413,6 +413,17 @@ namespace libtorrent
 		TORRENT_ASYNC_CALL1(set_sequential_download, sd);
 	}
 
+	void torrent_handle::set_keep_redundant_connections(bool keep) const
+	{
+		TORRENT_ASYNC_CALL1(set_keep_redundant_connections, keep);
+	}
+
+	bool torrent_handle::keep_redundant_connections() const
+	{
+		TORRENT_SYNC_CALL_RET(bool, false, keep_redundant_connections);
+		return r;
+	}
+
 	void torrent_handle::piece_availability(std::vector<int>& avail) const
 	{
 		TORRENT_SYNC_CALL1(piece_availability, boost::ref(avail));
